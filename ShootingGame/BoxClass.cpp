#include <gl\glew.h>
#include <gl\glut.h>
#define _USE_MATH_DEFINES
#include <math.h>

#include "BoxClass.h"
#include "system.h"

//////////////////////////////////////////////////////////////////////////////
//コンストラクタ
//////////////////////////////////////////////////////////////////////////////
BoxClass::BoxClass(void)
{
}

//////////////////////////////////////////////////////////////////////////////
//デストラクタ
//////////////////////////////////////////////////////////////////////////////
BoxClass::~BoxClass(void)
{
}

//////////////////////////////////////////////////////////////////////////////
//protected関数
//////////////////////////////////////////////////////////////////////////////

bool BoxClass::Initialize()
{
	return true;
}

//////////////////////////////////////////////////////////////////////////////
//概略:
//	オブジェクトを回転させる
//引数:
//	angle:角度
//////////////////////////////////////////////////////////////////////////////
void BoxClass::RotateObject(double angle)
{
	//半長軸ベクトルを回転させる
	RotateVector2(m_SemiLongVector , angle);
	//半短軸ベクトルを回転させる
	RotateVector2(m_SemiShortVector , angle);
	//回転した後の角度
	m_Angle += angle;

	//回転角が0>=　θ　<360にする
	if(m_Angle >= M_PI * 2) m_Angle -= M_PI * 2;
	else if(m_Angle < 0) m_Angle += M_PI * 2;
}

//////////////////////////////////////////////////////////////////////////////
//public関数
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//概略:
//	頂点座標を取得する
//戻り値:
//	m_Vertex:頂点座標
//////////////////////////////////////////////////////////////////////////////
FOUR_VERTEX BoxClass::GetVertex()
{
	return m_Vertex;
}

//////////////////////////////////////////////////////////////////////////////
//概略:
//	頂点座標を取得する
//引数:
//	i:頂点の配列番号
//戻り値:
//	m_VertexPosition[i]:頂点座標
//////////////////////////////////////////////////////////////////////////////
POSITION BoxClass::GetVertex(unsigned int i)
{
	if(i < m_Vertex.size())
	{
		return m_Vertex.m_VertexPosition[i];
	}
	return m_Vertex.m_VertexPosition[0];
}

//////////////////////////////////////////////////////////////////////////////
//概略:
//	頂点数を取得する
//戻り値:
//	m_Vertex.m_VertexPosition.size:頂点数
//////////////////////////////////////////////////////////////////////////////
int BoxClass::GetVertexSize()
{
	return m_Vertex.size();
}

//////////////////////////////////////////////////////////////////////////////
//概略:
//	矩形の半長軸の長さを取得する
//戻り値:
//	m_SemiLongAxis:矩形の半長軸の長さ
//////////////////////////////////////////////////////////////////////////////
double BoxClass::GetSemiLongAxis()
{
	return m_SemiLongAxis;
}

//////////////////////////////////////////////////////////////////////////////
//概略:
//	矩形の半短軸の長さを取得する
//戻り値:
//	m_SemiShortAxis:矩形の半短軸の長さ
//////////////////////////////////////////////////////////////////////////////
double BoxClass::GetSemiShortAxis()
{
	return m_SemiShortAxis;
}

//////////////////////////////////////////////////////////////////////////////
//概略:
//	矩形の半長軸のベクトルを取得する
//戻り値:
//	m_SemiLongVector:矩形の半長軸のベクトル
//////////////////////////////////////////////////////////////////////////////
THREE_DIMENSIONAL_VECTOR BoxClass::GetSemiLongVector()
{
	return m_SemiLongVector;
}

//////////////////////////////////////////////////////////////////////////////
//概略:
//	矩形の半短軸のベクトルを取得する
//戻り値:
//	m_SemiShortVector:矩形の半短軸のベクトル
//////////////////////////////////////////////////////////////////////////////
THREE_DIMENSIONAL_VECTOR BoxClass::GetSemiShortVector()
{
	return m_SemiShortVector;
}

//////////////////////////////////////////////////////////////////////////////
//概略:
//	矩形の4つの頂点を算出する
//////////////////////////////////////////////////////////////////////////////
void BoxClass::SetVertex()
{
	m_Vertex.m_VertexPosition[0].m_Vector.Set(m_Position.m_Vector.x + m_SemiLongVector.x + m_SemiShortVector.x , 
		m_Position.m_Vector.y + m_SemiLongVector.y + m_SemiShortVector.y , 0);
	m_Vertex.m_VertexPosition[1].m_Vector.Set(m_Position.m_Vector.x + m_SemiLongVector.x - m_SemiShortVector.x ,
		m_Position.m_Vector.y + m_SemiLongVector.y - m_SemiShortVector.y , 0);
	m_Vertex.m_VertexPosition[2].m_Vector.Set(m_Position.m_Vector.x - m_SemiLongVector.x - m_SemiShortVector.x ,
		m_Position.m_Vector.y - m_SemiLongVector.y - m_SemiShortVector.y , 0);
	m_Vertex.m_VertexPosition[3].m_Vector.Set(m_Position.m_Vector.x - m_SemiLongVector.x + m_SemiShortVector.x ,
		m_Position.m_Vector.y - m_SemiLongVector.y + m_SemiShortVector.y , 0);
}

//////////////////////////////////////////////////////////////////////////////
//概略:
//	更新
//////////////////////////////////////////////////////////////////////////////
bool BoxClass::Update()
{
	MoveObject();
	SetVertex();
	AccelObject();
	return true;
}

//////////////////////////////////////////////////////////////////////////////
//概略:
//	初期化
//引数:
//	*position:位置
//	*velocity:速度
//	*accelaration:加速度
//	*semi_long_vector:半長軸ベクトル
//	*semi_short_vector:半短軸ベクトル
//	flag:フラグ
//戻り値:
//	true:とりあえずtrueを返す
//////////////////////////////////////////////////////////////////////////////
bool BoxClass::Initialize(POSITION* position , VELOCITY* velocity , ACCELARATION* accelaration , THREE_DIMENSIONAL_VECTOR* semi_long_vector , THREE_DIMENSIONAL_VECTOR* semi_short_vector , bool flag)
{
	m_Position = *position;
	m_Velocity = *velocity;
	m_Accelaration = *accelaration;
	m_SemiLongVector = *semi_long_vector;
	m_SemiShortVector = *semi_short_vector;

	m_SemiLongAxis = m_SemiLongVector.Magnitude();
	m_SemiShortAxis = m_SemiShortVector.Magnitude();

	SetVertex();

	return true;
}

//////////////////////////////////////////////////////////////////////////////
//概略:
//	描画
//////////////////////////////////////////////////////////////////////////////
void BoxClass::Render()
{
}