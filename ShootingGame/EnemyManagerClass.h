#pragma once
#include "SingletonClass.h"
#include "ListClass.h"
#include "EnemyClass.h"

//使用クラス宣言
class WaveManagerClass;

class EnemyManagerClass :
	public SingletonClass<EnemyManagerClass>
{
public:
	friend class SingletonClass<EnemyManagerClass>;	//シングルトンからのインスタンス生成を許可する

private:
	ListClass<EnemyContextClass> m_Enemy;	//敵リスト

	EnemyManagerClass(void);
	~EnemyManagerClass(void);

public:
	//敵タイプ
	enum ENEMY_TYPE
	{
		E_ENEMY_TYPE_1,
		E_ENEMY_TYPE_2
	};

	//////////////////////////////////////////////////////////////////////////////
	//敵生成
	//引数:
	//	wave_manager:ウェーブマネージャー
	//	enemy_type:的タイプ
	//	position:敵生成位置
	//////////////////////////////////////////////////////////////////////////////
	bool CreateEnemy(WaveManagerClass *wave_manager , int enemy_type , POSITION* position);

	//////////////////////////////////////////////////////////////////////////////
	//初期化
	//////////////////////////////////////////////////////////////////////////////
	bool Initiarize();

	//////////////////////////////////////////////////////////////////////////////
	//更新
	//////////////////////////////////////////////////////////////////////////////
	bool Update(PlayerBulletManagerClass *player_bullet_manager);

	//////////////////////////////////////////////////////////////////////////////
	//描画
	//////////////////////////////////////////////////////////////////////////////
	void Render();
};

extern EnemyManagerClass* cl_EnemyManager;