#pragma once

//リスト用ノード
template <class T>
struct NODE
{
	NODE* PrevPointer;	//前ポインタ
	NODE* NextPointer;	//次ポインタ
	T Value;	//内部データ
	
	//コンストラクタ
	NODE()
	{
		//次ポインタにも前ポインタにもthisポインタを入れる
		PrevPointer = NextPointer = this;
	}

	//コンストラクタ
	NODE(T value , NODE *prev , NODE *next)
	{
		//内部データを入れる
		Value = value;
		//前ポインタを入れる
		PrevPointer = prev;
		//次ポインタを入れる
		NextPointer = next;
	}
};

template <class T>
class ListClass
{
private:
	NODE<T> *m_Head;	//ダミーノード
	NODE<T> *m_Current ;//現在のノード

public:
	//コンストラクタ
	ListClass(void)
	{
		//ダミーノード生成
		m_Head = m_Current = new NODE<T>();
	}

	//デストラクタ
	~ListClass(void)
	{
		//クリア
		Clear();
	}

	//////////////////////////////////////////////////////////////////////////////
	//概略:
	//	空リストか調べる
	//戻り値:
	//	true:空
	//	false:空じゃない
	//////////////////////////////////////////////////////////////////////////////
	bool Empty()
	{
		//ダミーノードの次がダミーだったら空
		return m_Head->NextPointer == m_Head;
	}

	//////////////////////////////////////////////////////////////////////////////
	//概略:
	//	次のノードへ移動
	//戻り値:
	//	true:移動した
	//	false:移動できなかった
	//////////////////////////////////////////////////////////////////////////////
	bool Next()
	{
		//空か次がダミーノードなら移動できない
		if(Empty() || m_Current->NextPointer == m_Head)
		{
			return false;
		}

		//移動する
		m_Current = m_Current->NextPointer;

		return true;
	}

	//////////////////////////////////////////////////////////////////////////////
	//概略:
	//	前のノードへ移動
	//戻り値:
	//	true:移動した
	//	false:移動できなかった
	//////////////////////////////////////////////////////////////////////////////
	bool Prev()
	{
		//空か次がダミーノードなら移動できない
		if(Empty() || m_Current->PrevPointer == m_Head)
		{
			return false;
		}

		//移動する
		m_Current = m_Current->PrevPointer;

		return true;
	}

	//////////////////////////////////////////////////////////////////////////////
	//概略:
	//	現在のノードの次へノードを追加
	//引数:
	//	value:追加する値
	//////////////////////////////////////////////////////////////////////////////
	void Add(T value)
	{
		//追加するノード
		NODE<T> *node = new NODE<T>(value , m_Current , m_Current->NextPointer);

		//次のノードの前ポインタに追加ノードを入れ　現在のノードの次ポインタに追加ノードを入れる
		m_Current->NextPointer = m_Current->NextPointer->PrevPointer = node;

		//現在のノードを追加ノードに移動
		m_Current = node;
	}

	//////////////////////////////////////////////////////////////////////////////
	//概略:
	//	先頭のノードへノードを追加
	//引数:
	//	value:追加する値
	//////////////////////////////////////////////////////////////////////////////
	void PushFront(T value)
	{
		//ダミーノードまで移動する
		m_Current = m_Head;
		//ノードを追加する
		Add(value);
	}

	//////////////////////////////////////////////////////////////////////////////
	//概略:
	//	末尾のノードへノードを追加
	//引数:
	//	value:追加する値
	//////////////////////////////////////////////////////////////////////////////
	void PushBack(T value)
	{
		//ダミーノードの前まで移動する
		m_Current = m_Head->PrevPointer;
		//ノードを追加する
		Add(value);
	}

	//////////////////////////////////////////////////////////////////////////////
	//概略:
	//	現在のノードを削除
	//////////////////////////////////////////////////////////////////////////////
	void RemoveCurrentNode()
	{
		//空は削除できない
		if(!Empty())
		{
			//前ノードの次ポインターに次ノードを入れる
			m_Current->PrevPointer->NextPointer = m_Current->NextPointer;

			//次ノードの前ポインターに前ノードを入れる
			m_Current->NextPointer->PrevPointer = m_Current->PrevPointer;

			//現在のノードを削除する
			delete m_Current;

			//現在のノードを前ノードに移動
			m_Current = m_Current->PrevPointer;
		}
	}

	//////////////////////////////////////////////////////////////////////////////
	//概略:
	//	先頭のノードを削除
	//////////////////////////////////////////////////////////////////////////////
	void PopFront()
	{
		//現在のノードをダミーの次へ移動
		m_Current = m_Head->NextPointer;

		//現在のノードを削除
		RemoveCurrentNode();
	}


	//////////////////////////////////////////////////////////////////////////////
	//概略:
	//	末尾のノードを削除
	//////////////////////////////////////////////////////////////////////////////
	void PopBack()
	{
		//現在のノードをダミーの前に移動
		m_Current = m_Head->PrevPointer;

		//現在のノードを削除
		RemoveCurrentNode();
	}

	//////////////////////////////////////////////////////////////////////////////
	//概略:
	//	全てのノードを削除
	//////////////////////////////////////////////////////////////////////////////
	void Clear()
	{
		//空になるまで先頭を削除し続ける
		while (!Empty())
		{
			PopFront();
		}
	}
};

