#pragma once

#include "SingletonClass.h"
#include "TimerClass.h"
#include "EnemyManagerClass.h"

class WaveManagerClass :
	public SingletonClass<WaveManagerClass> , public TimerClass
{
public:
	//フレンドクラス
	friend class SingletonClass<WaveManagerClass>;

private:
	std::string m_NowStage;	//今のステージ
	std::string m_NowWave;	//今のウェーブ
	int m_WaveCounter;	//ウェーブのカウント
	int m_MaxWave;	//今のステージの最大ウェーブ数

	//////////////////////////////////////////////////////////////////////////////
	//ウェーブ生成
	//引数:
	//	enemy_manager:エネミーマネージャー
	//	now_stage:今のステージ
	//	noe_wave:今のウェーブ
	//戻り値:
	//	true:生成成功
	//	false:生成失敗
	//////////////////////////////////////////////////////////////////////////////
	bool CreateWave(EnemyManagerClass *enemy_manager , std::string now_stage , std::string now_wave);

	//////////////////////////////////////////////////////////////////////////////
	//ウェーブデータのロード
	//引数:
	//	enemy_manager:エネミーマネージャー
	//	now_stage:今のステージ
	//	noe_wave:今のウェーブ
	//戻り値:
	//	true:生成成功
	//	false:生成失敗
	//////////////////////////////////////////////////////////////////////////////
	bool LoadWaveData(EnemyManagerClass *enemy_manager , std::string now_stage , std::string now_wave);

	//////////////////////////////////////////////////////////////////////////////
	//ウェーブの最大値をロード
	//////////////////////////////////////////////////////////////////////////////
	bool LoadMaxWave();

protected:
	WaveManagerClass(void);
	virtual ~WaveManagerClass(void);

public:
	
	//ステージ番号
	enum STAGE_NUMBER
	{
		E_STAGE1 = 1,	//ステージ1
		E_STAGE2,	//ステージ2
		E_STAGE3,	//ステージ3
		E_STAGE4,	//ステージ4
		E_STAGE5,	//ステージ5
		E_STAGE6	//ステージ6
	};

	//////////////////////////////////////////////////////////////////////////////
	//今のステージを調べる
	//戻り値:
	//	今のステージ
	//////////////////////////////////////////////////////////////////////////////
	std::string GetNowStage();

	//////////////////////////////////////////////////////////////////////////////
	//初期化
	//引数:
	//	now_stage:今のステージ番号
	//戻り値:
	//	true:成功
	//	false:データのロードに失敗
	//////////////////////////////////////////////////////////////////////////////
	bool Initiarize(int now_stage);

	//////////////////////////////////////////////////////////////////////////////
	//更新
	//引数:
	//	enemy_manager:エネミーマネージャー
	//引数:
	//	true:更新成功
	//////////////////////////////////////////////////////////////////////////////
	bool Update(EnemyManagerClass *enemy_manager);
};

extern WaveManagerClass* cl_WaveManager;
